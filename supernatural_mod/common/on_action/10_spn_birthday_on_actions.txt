#For when a spn genetic birth occurs
spn_on_genetic_birth = {
	trigger = {
		NOR = {
			has_game_rule = spn_no_trait_inheritance 
			has_game_rule = spn_human_no_immortal_trait_inheritance
			has_game_rule = spn_human_only_trait_inheritance
		}
		OR = {
			scope:mother = { spn_has_supernatural_trait = yes }
			scope:real_father = { spn_has_supernatural_trait = yes }
		}
	}
	effect = {
		if = { #Both Parents Vampire
			limit = {
				NOT = { has_game_rule = spn_werewolf_trait_inheritance }
				scope:real_father = { has_trait = spn_vampire }
				scope:mother = { has_trait = spn_vampire }
			}

			spn_give_knowledge_of_vampire_secret = { CHARACTER = scope:mother }
		
			if = {
				limit = { scope:father = scope:real_father }
				spn_give_knowledge_of_vampire_secret = { CHARACTER = scope:father }
			}
			else_if = {
				limit = {
					scope:real_father = { has_character_flag = pregnancy_real_father_knows }
				}
				spn_give_knowledge_of_vampire_secret = { CHARACTER = scope:real_father }
			}

			spn_assign_sire_birth = {
				MOTHER = scope:mother
				FATHER = scope:real_father
			}

			spn_update_number_of_supernatural_children_for_parents = yes

			add_character_flag = {
				flag = spn_baby_vampire
			}
		}
		else_if = { #Both Parents Lycan
			limit = {
				#NOT = { has_game_rule = spn_vampire_trait_inheritance } #Commented out on 11/14/22 because Werewolves can procreate with Werewolves too
				scope:real_father = { has_trait = spn_werewolf }
				scope:mother = { has_trait = spn_werewolf }
			}

			spn_give_knowledge_of_lycan_secret = { CHARACTER = scope:mother }
		
			if = {
				limit = { scope:father = scope:real_father }
				spn_give_knowledge_of_lycan_secret = { CHARACTER = scope:father }
			}
			else_if = {
				limit = {
					scope:real_father = { has_character_flag = pregnancy_real_father_knows }
				}
				spn_give_knowledge_of_lycan_secret = { CHARACTER = scope:real_father }
			}

			spn_assign_sire_birth = {
				MOTHER = scope:mother
				FATHER = scope:real_father
			}

			spn_update_number_of_supernatural_children_for_parents = yes

			add_character_flag = {
				flag = spn_baby_werewolf
			}
		}
		else_if = { #Both Parents Supernaturals, but either not the same or are hybrids
			limit = {
				OR = {
					has_game_rule = spn_yes_trait_inheritance
					has_game_rule = spn_immortal_only_trait_inheritance
				}
				OR = {
					AND = {
						scope:real_father = { has_trait = spn_hybrid }
						scope:mother = { has_trait = spn_werewolf }
					}
					AND = {
						scope:real_father = { has_trait = spn_werewolf }
						scope:mother = { has_trait = spn_hybrid }
					}
				}
			}

			spn_give_knowledge_of_hybrid_secret = { CHARACTER = scope:mother }
		
			if = {
				limit = { scope:father = scope:real_father }
				spn_give_knowledge_of_hybrid_secret = { CHARACTER = scope:father }
			}
			else_if = {
				limit = {
					scope:real_father = { has_character_flag = pregnancy_real_father_knows }
				}
				spn_give_knowledge_of_hybrid_secret = { CHARACTER = scope:real_father }
			}

			spn_assign_sire_birth = {
				MOTHER = scope:mother
				FATHER = scope:real_father
			}

			spn_update_number_of_supernatural_children_for_parents = yes

			add_character_flag = {
				flag = spn_baby_werewolf
			}
		}
		else_if = { #Mother is Vampire
			limit = {
				NOR = {
					has_game_rule = spn_werewolf_trait_inheritance
				}
				scope:mother = { has_trait = spn_vampire }
			}
			
			spn_assign_mother_sire = {
				MOTHER = scope:mother
			}
		
			spn_update_number_of_supernatural_children_for_parents = yes
		
			add_character_flag = {
				flag = spn_baby_vampire
			}
		}
		else_if = { #Mother is Werewolf
			limit = {
				#NOR = {											#Commented out on 11/14/22, letting werewolves procreate in the Vampire setting
				#	has_game_rule = spn_vampire_trait_inheritance
				#}
				scope:mother = { has_trait = spn_werewolf }
			}

			spn_assign_mother_sire = {
				MOTHER = scope:mother
			}

			spn_update_number_of_supernatural_children_for_parents = yes

			add_character_flag = {
				flag = spn_baby_werewolf
			}
		}
		else_if = { #Mother is Hybrid
			limit = {
				OR = {
					has_game_rule = spn_yes_trait_inheritance
					has_game_rule = spn_werewolf_trait_inheritance
					scope:mother = { has_trait = spn_hybrid }
				}
			}

			spn_assign_mother_sire = {
				MOTHER = scope:mother
			}

			add_character_flag = {
				flag = spn_baby_werewolf
			}
		}
		else_if = { #Father is Vampire
		 	limit = {
		 		NOR = {
		 			has_game_rule = spn_werewolf_trait_inheritance
		 			has_game_rule = spn_immortal_only_trait_inheritance
		 			has_game_rule = spn_yes_trait_inheritance
		 		}
		 		scope:real_father = { has_trait = spn_vampire }
		 	}

		 	spn_assign_father_sire = {
		 		FATHER = scope:real_father
		 	}

		 	spn_update_number_of_supernatural_children_for_parents = yes

		 	add_character_flag = {
		 		flag = spn_baby_vampire
		 	}
		}
		else_if = { #Father is Lycan
		 	limit = {
		 		NOR = {
		 			has_game_rule = spn_vampire_trait_inheritance
		 			has_game_rule = spn_immortal_only_trait_inheritance
		 			has_game_rule = spn_yes_trait_inheritance
		 		}
		 		scope:real_father = { has_trait = spn_werewolf }
		 	}

		 	spn_assign_father_sire = {
		 		FATHER = scope:real_father
		 	}

		 	spn_update_number_of_supernatural_children_for_parents = yes

		 	add_character_flag = {
		 		flag = spn_baby_werewolf
		 	}
		}
		else_if = { #Father is hybrid
		 	limit = {
		 		NOR = {
		 			has_game_rule = spn_vampire_trait_inheritance
		 			has_game_rule = spn_immortal_only_trait_inheritance
		 			has_game_rule = spn_yes_trait_inheritance
		 			#has_game_rule = spn_no_hybrid_trait_inheritance
		 		}
		 		scope:real_father = { has_trait = spn_hybrid }
		 	}

		 	spn_assign_father_sire = {
		 		FATHER = scope:real_father
		 	}

		 	spn_update_number_of_supernatural_children_for_parents = yes

		 	add_character_flag = {
		 		flag = spn_baby_werewolf
		 	}
		}

		trigger_event = spn_initiate.9000 #Genetic Init
	}
}

#Used to Age up characters
spn_on_immortality_birthday = {
	trigger = {
		OR = {
			has_trait = spn_vampire
			has_trait = spn_hybrid
		}
		NOT = { has_variable = spn_overwrite_visual_age }
		NOT = { has_game_rule = spn_no_automatic_ageing }
	}

	effect = {
		if = {
			limit = {
				OR = {
					AND = {
						has_game_rule = spn_stops_at_portrait_maturity 
						age <= 25 
					}
					AND = {
						has_game_rule = spn_gradual_ageing
						age <= 16
					}
				}
				spn_has_supernatural_trait = yes
			}
			spn_track_current_visual_age = { VISUALAGE = age }
		}
		else_if = {
			limit = {
				spn_has_supernatural_trait = yes
				has_game_rule = spn_gradual_ageing
				age > 16
			}
			spn_track_current_visual_age = { VISUALAGE = spn_calc_gradual_visual_age }
		}
	}
}

#Check Pregnancy
spn_check_pregnancy = {
	effect = {
		if = { #Humans
			limit = {
				spn_has_supernatural_trait = no
				scope:real_father = { spn_has_supernatural_trait = no }
			}
			trigger_event = {
				on_action = spn_on_pregnancy_mother_events
			}
		}
		else_if = { #One or more of the baby makers is Supernatural
			limit = {
				spn_possible_pregnancy = { FATHER = scope:real_father }
			}
			#debug_log = "Supernatural Pregnancy Possible"
			random = {
				chance = spn_pregnancy_chance
				
				save_scope_value_as = {
					name = spn_preg_success
					value = yes
				}
			}

			if = {
				limit = {
					exists = scope:spn_preg_success
				}
				#debug_log = "Supernatural Pregnancy Success"
				trigger_event = {
					on_action = spn_on_pregnancy_mother_events
				}
			}
			else = {
				#debug_log = "Supernatural Pregnancy Failure"
				end_pregnancy = yes
				pregnancy_cleanup_effect = yes
			}
		}
		else = { #Terminate Pregnancy
			end_pregnancy = yes
			pregnancy_cleanup_effect = yes
		}
	}
}

#Call for base game pregnancy events
spn_on_pregnancy_mother_events = {
	events = {
		pregnancy.0001 # Universal hidden maintenance event
		pregnancy.1001 # Mother gives birth to current husband's child.
		pregnancy.1101 # Mother gives birth to ex-husband's child.
		pregnancy.2001 # Unwed mother gives birth to bastard child.
		pregnancy.2002 # Married mother gives birth to bastard child.
		pregnancy.2050 # Married mother in same-sex relationship.
	}
}