mages_summit = {
	is_shown = {
		highest_held_title_tier > tier_barony
		is_landed_or_landless_administrative = yes
		is_available_adult = yes
		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
		}
		has_trait = archmage
	}
	is_grand_activity = yes
	can_start_showing_failures_only = {
		custom_description = {
			text = may_call_mage_summit
			OR = {
				is_legendary_mage_trigger = yes
				AND = {
					OR = {
						has_trait = yaga
						has_trait = archmage
					}
					prestige_level >= very_high_prestige_level
				}
				AND = {
					OR = {
						has_trait = yaga
						has_trait = archmage
					}
					exists = house
					house = {
						has_house_modifier = magic_tradition_modifier
					}
				}
			}
		}
	}

	is_valid = {
		NOT = {
			has_variable = activity_invalidated
		}
		scope:host = {
			is_landed_or_landless_administrative = yes
			NOT = { is_incapable = yes }
		}
		# If no one shows up
		trigger_if = {
			limit = {
				is_current_phase_active = yes
			}
			has_attending_activity_guests = yes
		}
	}
	on_start = {
		#space for invitation event
		every_living_character = {
			limit = {
				NOT = {
					THIS = scope:host
				}
				is_alive = yes
				is_adult = yes
				is_imprisoned = no
				OR = {
					has_trait = archmage
					has_trait = yaga
				}
			}
			trigger_event = magic_ev7.81
		}
	}

	on_invalidated = {
		# Host becomes unlanded
		if = {
			limit = {
				scope:host = { is_landed_or_landless_administrative = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}
		if = { # No one shows up
			limit = {
				has_attending_activity_guests = no
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
				activity_location = { save_scope_as = location }
			}
			scope:host = { trigger_event = activity_system.0100 }
		}
		remove_speaker_var = yes
	}

	on_host_death = {
		scope:activity = {
			set_variable = {
				name = activity_invalidated
			}
		}
	}

	#province_filter = domain
	#ai_province_filter = capital
	wait_time_before_start = { months = 1 }
	max_guest_arrival_delay_time = { months = 24 }

	###################
	# OPTIONS
	###################

	options = {
		# How fancy do you make your dishes?
		feast_option_food = {
			feast_food_bad = {
				#is_shown = { has_dlc_feature = advanced_activities }
				
				ai_will_do = {
					value = 0
					# Financial preference.
					add = activity_option_likes_cheap_expense_value
					# Fanciness preference.
					add = activity_option_likes_functional_food_option_value
				}
			}
			feast_food_normal = {
				default = yes
				cost = {
					gold = {
						add = {
							add = {
								value = 10
								desc = feast_food_normal
							}
							add = {
								value = 10
								multiply = activity_cost_scale_by_tier
								subtract = 10
								desc = activity_cost_scale_by_tier_desc
							}
							add = {
								value = 10
								multiply = activity_cost_scale_by_era
								subtract = 10
								desc = activity_cost_scale_by_era_desc
							}
							add = {
								value = 100
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 10
									add = {
										value = 10
										multiply = activity_cost_scale_by_tier
										subtract = 10
									}
									add = {
										value = 10
										multiply = activity_cost_scale_by_era
										subtract = 10
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
							min = 0
						}
					}
				}

				ai_will_do = {
					value = 0
					# Financial preference.
					add = activity_option_likes_middling_expense_value
					# Fanciness preference.
					## We just use slightly reduced fanciness prefs here.
					add = {
						value = activity_option_likes_ostentatious_food_option_value
						multiply = 0.5
					}
				}
			}
			feast_food_good = {
				#is_shown = { has_dlc_feature = advanced_activities }

				cost = {
					gold = {
						add = {
							add = {
								value = 35
								desc = feast_food_good
							}
							add = {
								value = 35
								multiply = activity_cost_scale_by_tier
								subtract = 35
								desc = activity_cost_scale_by_tier_desc
							}
							add = {
								value = 35
								multiply = activity_cost_scale_by_era
								subtract = 35
								desc = activity_cost_scale_by_era_desc
							}
							add = {
								value = 200
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 35
									add = {
										value = 35
										multiply = activity_cost_scale_by_tier
										subtract = 35
									}
									add = {
										value = 35
										multiply = activity_cost_scale_by_era
										subtract = 35
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
							min = 0
						}
					}
				}

				ai_will_do = {
					value = 0
					# Financial preference.
					add = activity_option_likes_heavy_expense_value
					# Fanciness preference.
					add = activity_option_likes_ostentatious_food_option_value
				}
			}
		}
		options_security = {
			option_security_1 = {
				default = yes
				cost = {
					gold = 0
				}
			}
			option_security_2 = {
				cost = {
					gold = 300
				}
			}
		}
	}

	###################
	# PHASES
	###################

	phases = {
		prelude_phase = {
			is_predefined = yes
			order = 1
			on_phase_active = {
				ms_clear_flags_effect = yes
				if = {
					limit = {
						is_ai = yes
					}
					ms_load_intents_for_ai_effect = yes
				}
				if = {
					limit = { this = scope:host }
					scope:activity = { progress_activity_phase_after = { weeks = 3 } }
					# Check that there are guests apart from the feast host.
					if = {
						limit = {
							scope:activity = {
								any_attending_character = {
									count < 1
									NOT = {	this = scope:host }
								}
							}
						}
						# If there are no other guests, throw this event.
						trigger_event = witch.3002
					}
					else = {
						trigger_event = magic_ev7.76
						#special4host
						random = {
							chance = 50
							trigger_event = {
								id = magic_ev7.82
								days = 4
							}
						}
						#Mammon
						random = {
							chance = 30
							trigger_event = {
								id = magic_ev7.100
								days = { 5 14 }
							}
						}
					}
				}
				else = {
					trigger_event = magic_ev7.80
				}
				if = {
					limit = {
						scope:activity = {
							any_attending_character = {
								has_character_flag = yaga_flag
							}
						}
					}
					random = {
						chance = 75
						trigger_event = {
							id = magic_ev7.83	#Yaga
							days = 12
						}
					}
				}
			}

			on_weekly_pulse = {
				trigger_event = { on_action = ms_default_event_selection }
			}
		}
		meeting_phase = {
			is_predefined = yes
			order = 2
			on_enter_phase = {
				assign_speaker_var = yes
				if = {
					limit = { this = scope:host }
					# No passive state, just jump right into it
					scope:activity = { progress_activity_phase_after = { days = 2 } }
				}
				trigger_event = magic_ev7.101
			}
			on_phase_active = {
				if = {
					limit = { this = scope:host }
					scope:activity = { progress_activity_phase_after = { days = 14 } }
				}
				select_speaker_effect = yes
				if = {
					limit = { this = scope:speaker0 }
					trigger_event = magic_ev7.102
				}
				else = {
					trigger_event = magic_ev7.103
				}
			}

			on_end = {
				# Run conclusion stuff here
				#if = {
				#	limit = { this = scope:host }
				#	trigger_event = witch.3098
				#}
				ms_resolve_voting_effects = yes
			}
		}
	}


	# desc is only shown in debug AI watch window
	ai_will_do = {
		value = 200
		
		# How much do you care about your faith not liking this?
		if = {
			limit = {
				faith = { has_doctrine_parameter = witchcraft_illegal }
				NOT = { has_trait = cynical }
			}
			add = -25
		}

		if = {
			limit = {
				has_character_flag = abdul_dude
			}
			add = -50
		}
		
		#Can you actually afford this?
		if = {
			limit = {
				NOT = { can_make_expensive_purchase_trigger = { PRICE = mage_summit_cost } }
			}
			add = -50
		}
	}

	ai_check_interval = 60

	ai_will_select_province = {
		value = 10
	}
	
	is_location_valid = {
		exists = province_owner
		OR = {
			ROOT = scope:host.capital_province
			is_power_place_trigger = yes
		}
	}

	province_filter = domain
	ai_province_filter = domain

	max_province_icons = 1
	
	cost = {
		gold = {
			add = {
				value = mage_summit_cost
				desc = hunt_base_cost
			}
			if = {
				limit = {
					exists = house
					house = {
						has_house_modifier = magic_tradition_modifier
					}
				}
				multiply = {
					value = 0.5
					desc = magic_tradition_modifier
				}
			}
		}
	}

	ui_predicted_cost = {
		gold = {
			# Base Cost
			value = mage_summit_cost
			if = {
				limit = {
					exists = house
					house = {
						has_house_modifier = magic_tradition_modifier
					}
				}
				multiply = 0.5
			}
			# Make it a multiple of 5 (rounded up)
			divide = 5 
			ceiling = yes 
			multiply = 5
		}
	}
	cooldown = { years = 10 }
	
	###################
	# ACTIVITY-SPECIFIC PULSES
	###################
	
	pulse_actions = {
		entries = {
			recited_witchcraft_treatise relation_gains_friend guest_impressed_by_court_artifact host_gains_diplo_xp guest_friendship guest_insulted apa_studying_scripture apa_comet_sighted
		}
		chance_of_no_event = 15
	}

	###################
	# GUEST HANDLING
	###################

	max_guests = 30

	guest_invite_rules = {
		defaults = {
			1 = activity_invite_rule_mages
			2 = activity_invite_rule_true_witches
		}
		rules = {
			
			3 = activity_invite_rule_other_magic
			# MP 
			#4 = activity_invite_mp
		}
	}

	can_be_activity_guest = {
		#faith = scope:host.faith
		is_alive = yes
		is_adult = yes
		is_travelling = no
		is_imprisoned = no
		is_incapable = no
		is_in_army = no
		NOT = {
			exists = involved_activity
		}
		#is_available = yes
		OR = {
			has_trait = true_witch
			has_trait = archmage
			has_trait = yaga
			has_trait = demon
			has_focus = arcane_focus
			has_trait = lifestyle_mystic
			has_trait = scholar
			OR = {
				has_trait = witch
				any_secret = { secret_type = secret_witch }
			}
			has_trait = grandmaster_coven
		}
	}

	host_intents = {
		intents = { sharing_knowledge_intent political_matters_intent show_superiority_intent }
		default = sharing_knowledge_intent
	}

	guest_intents = {
		intents = { sharing_knowledge_intent political_matters_intent show_superiority_intent }
		default = sharing_knowledge_intent
	}

	guest_join_chance = {
		base = 20
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes
		modifier = {
			OR = {
				has_trait = true_witch
				has_trait = archmage
			}
			add = {
				value = 300
			}
			desc = ms_guest_important_event
		}
	}
	
	on_complete = {
		#if = {
		#	limit = {
		#		this = scope:host
		#	}
		#	scope:host = {
		#		disburse_witch_ritual_host_rewards_effect = yes
		#	}
		#}

		remove_speaker_var = yes
	}

	### Graphics
	map_entity = {
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_feast_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_feast_01_entity"
	}
	
	map_entity = "building_western_feast_01_entity"

	# Travel
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				#geographical_region = world_europe
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day" 
	}

	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	# End Travel
	background = {
		trigger = {
			#has_current_phase = prelude_phase
			NOR = {
				has_current_phase = meeting_phase
				has_current_phase = prelude_phase
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp2_courtyard.dds"
		environment = "environment_event_bp1_courtyard_mena" 
		ambience = "event:/SFX/Events/Backgrounds/castle_courtyard_western"
	}
	background = {
		trigger = {
			has_current_phase = prelude_phase
		}
		texture = "gfx/interface/illustrations/event_scenes/feast.dds"
		environment = "environment_event_feast"
		ambience = "event:/SFX/Events/Backgrounds/feasthall"
		music = "grandfeast_cue"
	}
	background = {
		trigger = {
			has_current_phase = meeting_phase
		}
		texture = "gfx/interface/illustrations/event_scenes/throneroom_east.dds"
		environment = "environment_event_fp2_throneroom" 
		ambience = "event:/DLC/FP2/SFX/Events/throneroom"
	}

	window_characters = {

		guest = {
			camera = camera_event_center
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
							NOT = { has_trait = craven }
						}
					}
					animation = { boredom fear lunatic paranoia drink scheme spymaster ecstasy }
				}
				animation = worry
			}
		}

		guest = {
			camera = camera_event_center
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
							NOT = { has_trait = craven }
						}
					}
					animation = { boredom fear lunatic paranoia drink scheme spymaster ecstasy }
				}
				animation = worry
			}
		}
		
		host = {
			camera = camera_event_center
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {	scope:character = { NOT = { has_trait = craven }	} }
					animation = { boredom fear lunatic paranoia drink scheme spymaster ecstasy }
				}
				animation = worry
			}
		}
		
		travel_host = {
			camera = camera_event_center
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character.location = { is_sea_province = yes }
					}
					animation = { idle }
				}
				triggered_animation = {
					trigger = { scope:character = { has_trait = impatient } }
					animation = { jockey_gallop }
				}
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_event_center
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
						NOT = { has_trait = craven }
						}
					}
					animation = { boredom fear lunatic paranoia drink scheme spymaster ecstasy }
				}
				animation = worry
			}
		}

		guest = {
			camera = camera_event_center
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = {
						NOT = { has_trait = craven }
						}
					}
					animation = { boredom fear lunatic paranoia drink scheme spymaster ecstasy }
				}
				animation = worry
			}
		}
	}
}
