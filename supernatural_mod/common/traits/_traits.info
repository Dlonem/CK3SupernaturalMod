
== Loc/icon ==
By default, the name key is trait_<key>, and the desc key is trait_<key>_desc.
The default icon path is gfx/interface/icons/traits/<trait>.dds.

These can be overridden with dynamic descriptions.
E.G.,
name = some_loc_key
Or
name = {
	first_valid = { ... }
}

The parameters are:
name
desc
icon

The root scope is the character.
Note that in some cases there may be no root, so make sure your first check is a fallback for "NOT = { exists = this }" if you add dynamic names, descs, or icons.

An example:
	icon = {
		first_valid = {
			triggered_desc = {
				trigger = { NOT = { exists = this } }
				desc = "gfx/interface/icons/traits/diligent.dds"
			}
			
			triggered_desc = {
				trigger = { gold > 1000 }
				desc = "gfx/interface/icons/traits/diligent.dds"
			}
			
			desc = "gfx/interface/icons/traits/deceitful.dds"
		}
	}

=== Special Trait Flags ===

health = X.X			- Changes actual health value
fertility = X.X			- Percentage modifier on fertility
inherit_chance = X		- Chance of passing on the trait to children
birth = X				- How many characters out of 100 are born with this trait (when not inherited). Can have decimals
random_creation = X		- How many characters out of 100 are created with this trait? (As opposed to actually being born; this is for things like generated characters, script characters, etc.)

triggered_opinion = { # Applied if the associated conditions are fulfilled
	opinion_modifier = opinion_modifier_key		# What opinion modifier to apply if the conditions are fulfilled
	# Everything below is optional
	parameter = doctrine_parameter_key 			# What boolean doctrine parameter to check for
	check_missing = yes							# Check that the parameter is *not* set (or set to false), rather than set to true
	
	same_faith = yes							# Only apply to characters of the same faith
	same_dynasty = yes							# Only apply to characters of the same dynasty
	ignore_opinion_value_if_same_trait = yes	# If both characters have this trait, ignore the opinion effect. Punishment reasons still apply
	male_only = yes								# Only applied if the trait holder is male
	female_only = yes							# Only applied if the trait holder is female. Mutually exclusive with male_only
}

compatibility = { # This is not a Opinion modifier, but can be used by 'compatibility_modifier' and 'trait_compatibility' trigger. Compatibility is checked for the Trait holder vs the listed Traits (of another character.)
	gluttonous = 20
	drunkard = @pos_compat_low
}

parent_inheritance_sex = male/female/all	# specifies whether the trait can be inherited from male/female/all parents (all by default)
child_inheritance_sex = male/female/all		# specifies whether the trait can be inherited by male/female/all children (all by default)
genetic = yes/not							# If set to yes (no by default), the inheritance will follow the following rules: The trait can be inactive. Children can inherit the trait from both active and inactive parent traits.
											# An active trait is inherited with 100% chance, an inactive trait with a 50% chance. If the trait is successfully inherited from both parents, it becomes active.
											# If it's inherited only from one parent, it's inactive.
inherit_from_real_father = yes/no			# Should the trait be inherited from the real (biological) father? (yes by default)
enables_inbred = yes/no						# This trait enables the children of the character to be considered for the inbred trait (no by default).
											# It only enables the inbred chance if there are common ancestors of the parents, so there is no risk of 'inbred' if the parents are not related.
											# If inbred is not enabled by parents' traits, but there are common ancestors, there's a chance (same as for inbred trait when it's enabled) the child will get a random trait with enables_inbred = yes.
good = yes/no								# marks this trait as good (default no)
genetic_constraint_all = beauty				# This genetic constraint will be applied when gaining the trait
forced_portrait_age_index = 1				# The character will use this portrait age index instead of one of the age sub-genes marked as "generic". You can specify more than one such index if you want to randomize between them. If multiple traits force indexes, it randomizes between all of them
forced_portrait_age_index = 2				# Example showing that you can define more than one index
portrait_extremity_shift = 0.25				# When gaining this trait, every single morph gene will be shifted by this percentage towards 0 or 1; whichever it is closest to. E.G., 0.4 will shift 25% towards 0, resulting in 0.3
ugliness_portrait_extremity_shift = 0.75	# When gaining this trait, every single morph gene associated with the character's most extreme single trait (as defined in common/genes) shifted by this percentage towards 0 or 1; whichever it is closest to. E.G., 0.4 will shift 25% towards 0, resulting in 0.3. "Most extreme" is decided simply by taking the feature whose genes have the highest average deviation from 50% strength
immortal = yes								# Will stop visual aging, and make the character immune to natural death. Can still be killed by script. Fertility will match visual age. You can use set_immortal_age to change the visual age

physical = yes								# Marks the trait as physical
health_trait = yes								# Marks the trait as health related
fame = yes									# Marks the trait as fame related

trait_exclusive_if_realm_contains = {}		# A list of terrain types that are taken into consideration when commander traits are randomly assigned to commanders. These traits are only assigned/considered if the commander's culture contains a province that has one of the terrain types specified in the list
trait_winter_exclusive = yes				# Marks the trait as only showing up if the character's realm contains a province that can be affected by winter
blocks_from_claim_inheritance = yes			# Prevents inheriting claims
blocks_from_claim_inheritance_from_dynasty = yes # Prevents inheriting claims from dynasty members

shown_in_ruler_designer = yes/no # Defaults to yes
ruler_designer_cost = int # Cost to take in ruler designer, defaults to zero

valid_sex = all/male/female # Defaults to all, trait can only be had by characters of this sex

# Modifier that will be applied for characters with a culture with the specified parameter
culture_modifier = {
	parameter = can_blind_prisoners
	diplomacy = 5
}

# If the culture of the person passing on their titles has this flag, then children with this trait are considered to be oldest (or youngest, in ultimogeniture)
# Does not affect gender preference and the like at all, just the age-based ordering of children
culture_succession_prio = children_can_be_born_in_the_purple

# old_trait_indexes.lookup contains the ordered list of named traits to match up with the pre 1.4 manual indexes traits had to assign.
# Nulls fill the gaps between the valid entries.
# Make sure to adjust this for your mods traits when relasing for 1.4 if you want your saves from 1.3 to be compatible. If you did not edit the traits or are going to break compatibility then leave it as is.


lustful
chaste
gluttonous
temperate
greedy
generous
lazy
diligent
wrathful
calm
patient
impatient
arrogant
humble
deceitful
honest
craven
brave
shy
gregarious
ambitious
content
arbitrary
just
cynical
zealous
paranoid
trusting
compassionate
callous
sadistic
stubborn
fickle
vengeful
forgiving

