#spn_give_vampire_secret_or_trait_effect 		- trait if accepted, secret if not
spn_give_vampire_secret_or_trait_effect = {
	save_temporary_scope_as = spn_vampire_character
	if = {
		limit = { #Not already a known vampire
			NOR = {
				has_trait = spn_known_vampire
				any_secret = { secret_type = spn_secret_vampire }
			}	
		}
		if = {
			limit = {
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = spn_known_vampire GENDER_CHARACTER = scope:spn_vampire_character }
			}
			add_secret = {
				type = spn_secret_vampire
			}
		}
		else_if = {
			limit = {
				NOT = { has_character_flag = spn_recently_became_vampire }
			}
			add_trait = spn_known_vampire
		}
	}	
}

#spn_give_lycan_secret_or_trait_effect 		- trait if accepted, secret if not
spn_give_lycan_secret_or_trait_effect = {
	save_temporary_scope_as = spn_werewolf_character
	if = {
		limit = { #Not already a known Werewolf
			NOR = {
				has_trait = spn_known_werewolf
				any_secret = { secret_type = spn_secret_werewolf }
			}	
		}
		if = {
			limit = {
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = spn_known_werewolf GENDER_CHARACTER = scope:spn_werewolf_character }
			}
			add_secret = {
				type = spn_secret_werewolf
			}
		}
		else_if = {
			limit = {
				NOT = { has_character_flag = spn_recently_became_lycan }
			}
			add_trait = spn_known_werewolf
		}
	}	
}

#spn_give_hybrid_secret_or_trait_effect 		- trait if accepted, secret if not
spn_give_hybrid_secret_or_trait_effect = {
	save_temporary_scope_as = spn_hybrid_character
	if = {
		limit = { #Not already a known hybrid
			NOR = {
				has_trait = spn_known_hybrid
				any_secret = { secret_type = spn_secret_hybrid }
			}	
		}
		if = {
			limit = {
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = spn_known_hybrid GENDER_CHARACTER = scope:spn_hybrid_character }
			}
			add_secret = {
				type = spn_secret_hybrid
			}
		}
		else_if = {
			limit = {
				NOT = { has_character_flag = spn_recently_became_hybrid }
			}
			add_trait = spn_known_hybrid
		}
	}	
}

#spn_give_hunter_secret_or_trait_effect 		- trait if accepted, secret if not
spn_give_hunter_secret_or_trait_effect = {
	save_temporary_scope_as = spn_hunter_character
	if = {
		limit = { #Not already a known hunter
			NOR = {
				has_trait = spn_known_hunter
				any_secret = { secret_type = spn_secret_hunter }
			}	
		}
		if = {
			limit = {
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = spn_known_hunter GENDER_CHARACTER = scope:spn_hunter_character }
			}
			add_secret = {
				type = spn_secret_hunter
			}
		}
		else_if = {
			limit = {
				NOT = { has_character_flag = spn_recently_became_hunter }
			}
			add_trait = spn_known_hunter
		}
	}	
}

spn_give_knowledge_of_vampire_secret = {
	random_secret = {
		limit = {
			secret_type = spn_secret_vampire
			NOT = { is_known_by = $CHARACTER$ }
		}
		save_scope_as = spn_vampire_secret
		reveal_to = $CHARACTER$
	}
}

spn_give_knowledge_of_lycan_secret = {
	random_secret = {
		limit = {
			secret_type = spn_secret_werewolf
			NOT = { is_known_by = $CHARACTER$ }
		}
		save_scope_as = spn_werewolf_secret
		reveal_to = $CHARACTER$
	}
}

spn_give_knowledge_of_hybrid_secret = {
	random_secret = {
		limit = {
			secret_type = spn_secret_hybrid
			NOT = { is_known_by = $CHARACTER$ }
		}
		save_scope_as = spn_hybrid_secret
		reveal_to = $CHARACTER$
	}
}

spn_give_knowledge_of_hunter_secret = {
	random_secret = {
		limit = {
			secret_type = spn_secret_hunter
			NOT = { is_known_by = $CHARACTER$ }
		}
		save_scope_as = spn_hunter_secret
		reveal_to = $CHARACTER$
	}
}


#OVERRIDES

#Used to notify everyone who cares about secret owner/target (and additional characters of interest) about secret + effects
secret_exposed_notification_effect = {
	save_scope_as = secret
	secret_owner = {
		save_scope_as = owner
	}
	if = {
		limit = { exists = secret_target }
		secret_target = { save_scope_as = target }
	}


	#### Visible events for those who care and knower of landed people's secrets ###
	
	#Save spouses, close family members, liege and anyone whom I am primary heir of
	scope:owner = {
		save_list_targets_for_secret_exposure_events_effect = { SECRET = scope:secret CHARACTER = scope:owner }
	}

	#If it's a lover secret, tell people who cares about target as well
	if = {
		limit = { scope:secret = { secret_type = secret_lover } }
		save_extra_lover_list_targets_for_secret_exposure_events_effect = yes
	}

	#If it's a bastard secret, tell people who cares about child/real_father as well
	if = {
		limit  = {
			scope:secret = {
				OR = {
					secret_type = secret_disputed_heritage
					secret_type = secret_unmarried_illegitimate_child
				}
			}
		}
		save_extra_bastard_list_targets_for_secret_exposure_events_effect = yes
	}

	#If it's a murder/murder attempt secret, also inform those who care about victim
	if = {
		limit = {
			scope:secret = {
				OR = {
					secret_type = secret_murder_attempt
					secret_type = secret_murder
				}
			}
		}

		scope:victim = { save_list_targets_for_secret_exposure_events_effect = { SECRET = scope:secret CHARACTER = scope:victim } }
	}

	#Send the notification event
	every_in_list = {
		list = send_exposed_secret_event_list

		if = {
			limit = { scope:secret = { secret_type = secret_incest } }
			trigger_event = secrets.0106
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_witch } }
			trigger_event = secrets.0107
		}
		else_if = {
			limit = { scope:secret = { secret_type = spn_secret_vampire } }
			trigger_event = spn_secrets.0002
		}
		else_if = {
			limit = { scope:secret = { secret_type = spn_secret_werewolf } }
			trigger_event = spn_secrets.0004
		}
		else_if = {
			limit = { scope:secret = { secret_type = spn_secret_hybrid } }
			trigger_event = spn_secrets.0006
		}
		else_if = {
			limit = { scope:secret = { secret_type = spn_secret_hunter } }
			trigger_event = spn_secrets.0008
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_cannibal } }
			trigger_event = secrets.0104
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_non_believer } }
			trigger_event = secrets.0105
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_homosexual } }
			trigger_event = secrets.0103
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_lover } }
			trigger_event = secrets.0108
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_deviant } }
			trigger_event = secrets.0101
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_disputed_heritage } }
			trigger_event = secrets.0110
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_unmarried_illegitimate_child } }
			trigger_event = secrets.0112
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_murder_attempt } }
			trigger_event = secrets.0116
		}
		else_if = {
			limit = { scope:secret = { secret_type = secret_murder } }

			if = {
				limit = { scope:secret = { has_variable = known_murder } }
				add_death_event_blocker_effect = { DEAD = scope:victim }
			}

			trigger_event = secrets.0118
		}
		else = {
			add_to_list = send_exposed_secret_feed_message_list
		}
	}

	### Sending feed messages to other characters who care ###
	scope:owner = {
		#Save secret knowers and extended family members for feed messages
		save_list_targets_for_secret_exposure_feed_messages_effect = { SECRET = scope:secret CHARACTER = scope:owner }
	}

	#Extra stuff for lover secrets
	if = {
		limit = { scope:secret = { secret_type = secret_lover } }
		secret_owner = {
			#Also send feed messages who know about my sodomy/incest secret if relation is homosexual/incestuous
			scope:target = { save_temporary_scope_as = other_lover }
			save_additional_lover_secret_list_targets_for_feed_messages_effect = yes
		}

		#Feed messages for my lover secret target
		scope:target = {
			if = {
				limit = {
					exists = scope:targets_secret
				}
				#Save secret knowers and extended family members for feed messages
				save_list_targets_for_secret_exposure_feed_messages_effect = { SECRET = scope:targets_secret CHARACTER = scope:target }
			}

			#Also send feed messages who know about target's sodomy/incest secret if relation is homosexual/incestuous
			scope:target = { save_temporary_scope_as = other_lover }
			save_additional_lover_secret_list_targets_for_feed_messages_effect = yes
		}
	}

	every_in_list = {
		list = send_exposed_secret_feed_message_list
		save_scope_as = secret_expose_feed_message_scope

		send_interface_message = {
			type = secret_exposed_message
			left_icon = scope:owner
			right_icon = scope:target
			title = secret_exposed_notification_effect_message
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = secret_incest } }
						desc = secret_exposed_notification_effect_message_incest
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = secret_witch } }
						desc = secret_exposed_notification_effect_message_witch
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = spn_secret_vampire } }
						desc = spn_secret_exposed_notification_effect_message_vampire
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = spn_secret_werewolf } }
						desc = spn_secret_exposed_notification_effect_message_lycan
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = spn_secret_hybrid } }
						desc = spn_secret_exposed_notification_effect_message_hybrid
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = spn_secret_hunter } }
						desc = spn_secret_exposed_notification_effect_message_hunter
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = secret_cannibal } }
						desc = secret_exposed_notification_effect_message_cannibal
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = secret_non_believer } }
						desc = secret_exposed_notification_effect_message_non_believer
					}
					triggered_desc = {
						trigger = { scope:secret = {  secret_type = secret_homosexual } }
						desc = secret_exposed_notification_effect_message_homosexual
					}
					triggered_desc = {
						trigger = { #Incest lover
							scope:secret = { secret_type = secret_lover }
							scope:owner = { relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:target FAITH = scope:secret_expose_feed_message_scope.faith } }
						}
						desc = secret_exposed_notification_effect_message_lover_incest
					}
					triggered_desc = {
						trigger = { #Sodomy lover
							scope:secret = { secret_type = secret_lover }
							scope:owner = { relation_with_character_is_sodomy_in_faith_trigger = { CHARACTER = scope:target FAITH = scope:secret_expose_feed_message_scope.faith } }
						}
						desc = secret_exposed_notification_effect_message_lover_sodomy
					}
					triggered_desc = {
						trigger = { scope:secret = { secret_type = secret_lover } }
						desc = secret_exposed_notification_effect_message_lover
					}
					triggered_desc = {
						trigger = { scope:secret = { secret_type = secret_deviant } }
						desc = secret_exposed_notification_effect_message_deviant
					}
					triggered_desc = { #Illegitimate child
						trigger = {
							scope:secret = {
								OR = {
									secret_type = secret_disputed_heritage
									secret_type = secret_unmarried_illegitimate_child
								}
							}
						}
						desc = secret_exposed_notification_effect_message_illegitimate_child
					}
					triggered_desc = {
						trigger = { scope:secret = { secret_type = secret_murder_attempt } }
						desc = secret_exposed_notification_effect_message_murder_attempt
					}
					triggered_desc = {
						trigger = {
							scope:secret = { secret_type = secret_murder }
							NOT = { scope:owner = scope:secret_exposer }
						}
						desc = secret_exposed_notification_effect_message_murder
					}
					triggered_desc = {
						trigger = {
							scope:secret = { secret_type = secret_murder }
							scope:owner = scope:secret_exposer
						}
						desc = secret_exposed_notification_effect_message_known_murder
					}
				}
			}

			if = {
				limit = { has_hook_from_secret = scope:secret }
				if = {
					limit = {
						has_hook_of_type = {
							target = scope:owner
							type = weak_blackmail_hook
						}
					}
					remove_hook = {
						target = scope:owner
						type = weak_blackmail_hook
					}
				}
				else_if = {
					limit = {
						has_hook_of_type = {
							target = scope:owner
							type = strong_blackmail_hook
						}
					}
					remove_hook = {
						target = scope:owner
						type = strong_blackmail_hook
					}
				}
			}
		}
	}

	### Send toast to exposer ###
	if = {
		limit = {
			trigger_if = {
				limit = { exists = scope:target }
				NOR = {
					scope:secret_exposer = scope:target
					scope:secret_exposer = scope:owner
				}
			}
			trigger_else = {
				NOT = { scope:secret_exposer = scope:owner }
			}
		}
		scope:secret_exposer = {
			save_scope_as = secret_expose_feed_message_scope
			send_interface_toast = {
				left_icon = scope:owner
				right_icon = scope:target
				title = secret_exposed_notification_effect_message

				if = {
					limit = { scope:secret = {  secret_type = secret_incest } }
					custom_tooltip = secret_exposed_notification_effect_message_incest.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = secret_witch } }
					custom_tooltip = secret_exposed_notification_effect_message_witch.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = spn_secret_vampire } }
					custom_tooltip = spn_secret_exposed_notification_effect_message_vampire.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = spn_secret_werewolf } }
					custom_tooltip = spn_secret_exposed_notification_effect_message_lycan.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = spn_secret_hybrid } }
					custom_tooltip = spn_secret_exposed_notification_effect_message_hybrid.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = spn_secret_hunter } }
					custom_tooltip = spn_secret_exposed_notification_effect_message_hunter.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = secret_cannibal } }
					custom_tooltip = secret_exposed_notification_effect_message_cannibal.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = secret_non_believer } }
					custom_tooltip = secret_exposed_notification_effect_message_non_believer.i_exposed
				}
				else_if = {
					limit = { scope:secret = {  secret_type = secret_homosexual } }
					custom_tooltip = secret_exposed_notification_effect_message_homosexual.i_exposed
				}
				else_if = {
					limit = { #Incest lover
						scope:secret = { secret_type = secret_lover }
						scope:owner = { relation_with_character_is_incestuous_in_faith_trigger = { CHARACTER = scope:target FAITH = scope:secret_expose_feed_message_scope.faith } }
					}
					custom_tooltip = secret_exposed_notification_effect_message_lover_incest.i_exposed
				}
				else_if = {
					limit = { #Sodomy lover
						scope:secret = { secret_type = secret_lover }
						scope:owner = { relation_with_character_is_sodomy_in_faith_trigger = { CHARACTER = scope:target FAITH = scope:secret_expose_feed_message_scope.faith } }
					}
					custom_tooltip = secret_exposed_notification_effect_message_lover_sodomy.i_exposed
				}
				else_if = {
					limit = { scope:secret = { secret_type = secret_lover } }
					custom_tooltip = secret_exposed_notification_effect_message_lover.i_exposed
				}
				else_if = {
					limit = { scope:secret = { secret_type = secret_deviant } }
					custom_tooltip = secret_exposed_notification_effect_message_deviant.i_exposed
				}
				else_if = { #Illegitimate child, singular
					limit = {
						scope:secret = {
							OR = {
								secret_type = secret_disputed_heritage
								secret_type = secret_unmarried_illegitimate_child
							}
						}
					}
					custom_tooltip = secret_exposed_notification_effect_message_illegitimate_child.i_exposed
				}
				else_if = { #Illegitimate child, singular
					limit = { scope:secret = { secret_type = secret_murder_attempt } }
					custom_tooltip = secret_exposed_notification_effect_message_murder_attempt.i_exposed
				}
				else_if = { #Illegitimate child, singular
					limit = { scope:secret = { secret_type = secret_murder } }
					custom_tooltip = secret_exposed_notification_effect_message_murder.i_exposed
				}

				if = {
					limit = { has_hook_from_secret = scope:secret }
					remove_hook = {
						target = scope:owner
						type = weak_blackmail_hook
					}
				}
			}
		}
	}
}

#applies traits etc. when a secret is revealed
#SECRET = secret in question, POV = point of view i.e. who get this event
secret_exposed_owner_effects_effect = {
	$SECRET$ = {
		if = {
			limit = { #Checks to make sure the right target gets saved. Confusion might arise from the secret's "on_expose" effect since it sends the same event (secrets.0008) for both target and owner.
				exists = secret_target
				exists = scope:target
				scope:target = secret_owner
				NOT = { secret_owner = $POV$ } #To not mess up tooltips (in e.g. secrets.0108)
			}
			secret_owner = { save_scope_as = exposed_secret_target }
		}
		else_if = {
			limit = {
				exists = secret_target
			}
			secret_target = { save_scope_as = exposed_secret_target }
		}
		
		secret_owner = { save_scope_as = local_secret_owner }
	}

	###DEVIANT###
	if = {
		limit = { $SECRET$ = { secret_type = secret_deviant } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = deviant POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = deviant }
	}
	###SODOMITE###
	else_if = {
		limit = {
			$SECRET$ = { secret_type = secret_homosexual }
			relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = this } #To check your own gender
		}
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = sodomite POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = sodomite }
	}
	###CANNIBAL###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_cannibal } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = cannibal POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = cannibal }
	}
	###NON-BELIEVER###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_non_believer } }
		add_character_modifier = {
			modifier = known_non_believer
			days = 3650
		}
		if = {
			limit = {
				OR = {
					has_trait = zealous
					has_character_flag = non_believer_lost_zealous
				}
			}
			remove_trait_only_force_tooltip_if_not_root_effect = { TRAIT = zealous }
			add_character_flag = {
				flag = non_believer_lost_zealous
				days = 5
			}
		}
		if = {
			limit = {
				OR = {
					number_of_personality_traits < personality_trait_limit
					has_character_flag =  non_believer_gained_cynical
				}
			}
			add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = cynical POV = $POV$ }
			add_character_flag = {
				flag = non_believer_gained_cynical
				days = 5
			}
		}
		add_piety_level = -1
	}
	###INCEST###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_incest } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = incestuous POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = incestuous }
	}
	###WITCH###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_witch } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = witch POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = witch }
	}
	###VAMPIRE###
	else_if = {
		limit = { $SECRET$ = { secret_type = spn_secret_vampire } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = spn_known_vampire POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = spn_known_vampire }
	}
	###LYCAN###
	else_if = {
		limit = { $SECRET$ = { secret_type = spn_secret_werewolf } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = spn_known_werewolf POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = spn_known_werewolf }
	}
	###HYBRID###
	else_if = {
		limit = { $SECRET$ = { secret_type = spn_secret_hybrid } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = spn_known_hybrid POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = spn_known_hybrid }
	}
	###HUNTER###
	else_if = {
		limit = { $SECRET$ = { secret_type = spn_secret_hunter } }
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = spn_known_hunter POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = spn_known_hunter }
	}
	###LOVER###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_lover } }

		#Adds traits (adulterer, fornicator, sodomite, incestuous), removes devotion, sets opinions & rivalry
		extramarital_sex_exposure_consequences_with_target_effect = { TARGET = scope:exposed_secret_target SPOUSE_EVENT = no }
	}
	###DISPUTED HERITAGE###
	else_if = {
		limit = {
			$SECRET$ = {
				secret_type = secret_disputed_heritage
			}
		}
		
		# Child gains the Disputed Heritage trait
		scope:child = { add_trait = disputed_heritage }

		# Biological parents, if alive, suffer penalties from adultery.
		if = {
			limit = { scope:mother = { is_alive = yes } }
			scope:mother = {
				# Comprehensive effect which adds adulter/fornicator/incestuous traits, unfaithfulness & slept with wife opinions, and characters losing the appropriate number of piety level(s).
				expose_lover_secret_or_run_consequence_effect = {
					TARGET = scope:real_father
					EXPOSER = $POV$
				}
			}
		}
		else_if = { limit = { scope:real_father = { is_alive = yes } }
			# If the mother is dead, run this on the real_father instead (so it gets run somewhere). If the mother is alive, the real_father will have already suffered the penalties.
			scope:real_father = {	
				expose_lover_secret_or_run_consequence_effect = {
					TARGET = scope:mother
					EXPOSER = $POV$
				}
			}
		}

		# Additional father opinion modifiers
 		hidden_effect = {
 			# Real father gains opinion of child
			if = {
				limit = {
					scope:real_father = { is_alive = yes }
				}
				scope:real_father = {
					add_opinion = {
						target = scope:child
						modifier = truly_of_my_blood_opinion
					}
				}
			}

		 	#Non-real father loses opinion of child
			if = {
				limit = {
					exists = scope:father
					scope:father = {
						is_alive = yes
					}
				}
				scope:father = {
					add_opinion = {
						target = scope:child
						modifier = uncertain_lineage_opinion
					}
				}
			}
		}
	}
	###UNKNOWN FATHER###
	else_if = {
		limit = {
			$SECRET$ = {
				secret_type = secret_unmarried_illegitimate_child
			}
		}
		# Set the correct Father for the child
		scope:child = {
			set_father = scope:real_father
			set_parent_house_effect = yes
			remove_inherited_descendent_traits_effect = yes
		}

		#Father becomes adulterer/fornicator (mother already suffered these penalties when she was discovered pregnant out of wedlock)
		scope:real_father = {
			if = {
				limit = { is_alive = yes }

				#Adds adulter/fornicator/incestuous traits, unfaithfulness & slept with wife opinions, removes piety levels
				expose_lover_secret_or_run_consequence_effect = {
					TARGET = scope:mother
					EXPOSER = $POV$
				}
			}
		}
	}

	###ATTEMPTED MURDERER###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_murder_attempt } }

		#Hide this for everyone else
		if = {
			limit = { root = scope:murderer }
			add_dread = 10
			attempted_murder_opinion_effect = { VICTIM = scope:victim MURDERER = scope:murderer }
		}
	}
	###MURDERER###
	else_if = {
		limit = { $SECRET$ = { secret_type = secret_murder } }

		murder_consequences_known_or_exposed_effect = { MURDERER = scope:murderer VICTIM = scope:victim POV = $POV$ } #Traits, (crime) opinions, dread
	}
	## Struggle Catalysts
	if = {
		limit = {
			scope:local_secret_owner = {
				is_important_or_vip_struggle_character = yes
				any_character_struggle	 = {
					involvement = involved
					phase_has_catalyst = catalyst_reveal_secret_important
				}
			}
		}
		scope:local_secret_owner = {
			every_character_struggle = {
				involvement = involved
				activate_struggle_catalyst = {
					catalyst = catalyst_reveal_secret_important
					character = scope:local_secret_owner
				}
			}
		}
	}
}


#Give secret and save as scope:secret
give_secret_and_save_as_secret_effect = {
	save_temporary_scope_value_as = {
		name = give_secret_type
		value = flag:$SECRET_TYPE$
	}

	if = {
		limit = {
			OR = {
				scope:give_secret_type = flag:secret_deviant
				scope:give_secret_type = flag:secret_cannibal
				scope:give_secret_type = flag:secret_non_believer
				scope:give_secret_type = flag:secret_witch
				scope:give_secret_type = flag:spn_secret_vampire
				scope:give_secret_type = flag:spn_secret_werewolf
				scope:give_secret_type = flag:spn_secret_hybrid
				scope:give_secret_type = flag:spn_secret_hunter
			}
		}
		add_secret = {
			type = $SECRET_TYPE$
		}
	}
	else_if = {
		limit = {
			scope:give_secret_type = flag:secret_incest
		}
		give_incest_secret_or_nothing_effect = yes
	}
	else_if = {
		limit = {
			scope:give_secret_type = flag:secret_homosexual
			is_male = yes
		}
		give_homosexual_secret_or_nothing_effect = yes
	}

	random_secret = {
		limit = {
			secret_type = $SECRET_TYPE$
		}
		save_scope_as = secret
	}
}

